!function(){var e={371:function(){},299:function(){},528:function(){},743:function(){let{Component:e}=Shopware,{mapState:t}=Shopware.Component.getComponentHelper();e.override("sw-order-detail",{data(){return{originalZipCode:null}},computed:{...t("swOrderDetail",["order"]),orderRepository(){return Shopware.Service("repositoryFactory").create("order")},orderTypePayment(){return this.order?.customFields?.orderTypePayment??"other"},isCreditCardOrder(){return"credit_card"===this.orderTypePayment},isDetailsTabActive(){return"sw.order.detail.details"===this.$route.name},shippingZipCode(){return this.order?.deliveries?.[0]?.shippingOrderAddress?.zipcode??null}},watch:{order:{handler(e){e&&!this.originalZipCode&&(this.originalZipCode=this.shippingZipCode)},deep:!0,immediate:!0}},methods:{async onSaveEdits(){if(console.log(this.orderTypePayment),this.isCreditCardOrder&&this.isDetailsTabActive){this.createNotificationError({message:this.$tc("Orders with payment type Credit Card cannot be edited.")});return}this.originalZipCode!==this.shippingZipCode&&(this.createNotificationWarning({message:this.$tc("Shipping ZIP code has been changed.")}),await this.setZipCodeChangedFlag()),this.$super("onSaveEdits")},async setZipCodeChangedFlag(){try{console.log("Full Order Object:",this.order),console.log("Current Custom Fields:",this.order.customFields),this.order.customFields||(this.order.customFields={}),this.order.customFields.zipCodeChanged=!0,console.log("Updated Custom Fields:",this.order.customFields),await this.orderRepository.save([{id:this.order.id,customFields:this.order.customFields}],Shopware.Context.api),this.createNotificationSuccess({message:this.$tc("ZIP code change has been recorded.")})}catch(e){console.log(e)}}}})},972:function(e,t,r){var s=r(371);s.__esModule&&(s=s.default),"string"==typeof s&&(s=[[e.id,s,""]]),s.locals&&(e.exports=s.locals),(0,r(534).A)("55fbc298",s,!0,{})},244:function(e,t,r){var s=r(299);s.__esModule&&(s=s.default),"string"==typeof s&&(s=[[e.id,s,""]]),s.locals&&(e.exports=s.locals),(0,r(534).A)("34026a7a",s,!0,{})},615:function(e,t,r){var s=r(528);s.__esModule&&(s=s.default),"string"==typeof s&&(s=[[e.id,s,""]]),s.locals&&(e.exports=s.locals),(0,r(534).A)("3f63276e",s,!0,{})},534:function(e,t,r){"use strict";function s(e,t){for(var r=[],s={},a=0;a<t.length;a++){var n=t[a],i=n[0],o={id:e+":"+a,css:n[1],media:n[2],sourceMap:n[3]};s[i]?s[i].parts.push(o):r.push(s[i]={id:i,parts:[o]})}return r}r.d(t,{A:function(){return f}});var a,n="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!n)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var i={},o=n&&(document.head||document.getElementsByTagName("head")[0]),l=null,d=0,c=!1,m=function(){},u=null,h="data-vue-ssr-id",p="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function f(e,t,r,a){c=r,u=a||{};var n=s(e,t);return g(n),function(t){for(var r=[],a=0;a<n.length;a++){var o=i[n[a].id];o.refs--,r.push(o)}t?g(n=s(e,t)):n=[];for(var a=0;a<r.length;a++){var o=r[a];if(0===o.refs){for(var l=0;l<o.parts.length;l++)o.parts[l]();delete i[o.id]}}}}function g(e){for(var t=0;t<e.length;t++){var r=e[t],s=i[r.id];if(s){s.refs++;for(var a=0;a<s.parts.length;a++)s.parts[a](r.parts[a]);for(;a<r.parts.length;a++)s.parts.push(C(r.parts[a]));s.parts.length>r.parts.length&&(s.parts.length=r.parts.length)}else{for(var n=[],a=0;a<r.parts.length;a++)n.push(C(r.parts[a]));i[r.id]={id:r.id,refs:1,parts:n}}}}function w(){var e=document.createElement("style");return e.type="text/css",o.appendChild(e),e}function C(e){var t,r,s=document.querySelector("style["+h+'~="'+e.id+'"]');if(s){if(c)return m;s.parentNode.removeChild(s)}if(p){var a=d++;t=b.bind(null,s=l||(l=w()),a,!1),r=b.bind(null,s,a,!0)}else t=v.bind(null,s=w()),r=function(){s.parentNode.removeChild(s)};return t(e),function(s){s?(s.css!==e.css||s.media!==e.media||s.sourceMap!==e.sourceMap)&&t(e=s):r()}}var y=(a=[],function(e,t){return a[e]=t,a.filter(Boolean).join("\n")});function b(e,t,r,s){var a=r?"":s.css;if(e.styleSheet)e.styleSheet.cssText=y(t,a);else{var n=document.createTextNode(a),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(n,i[t]):e.appendChild(n)}}function v(e,t){var r=t.css,s=t.media,a=t.sourceMap;if(s&&e.setAttribute("media",s),u.ssrId&&e.setAttribute(h,t.id),a&&(r+="\n/*# sourceURL="+a.sources[0]+" */",r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}}},t={};function r(s){var a=t[s];if(void 0!==a)return a.exports;var n=t[s]={id:s,exports:{}};return e[s](n,n.exports,r),n.exports}r.d=function(e,t){for(var s in t)r.o(t,s)&&!r.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="bundles/storecredit/",window?.__sw__?.assetPath&&(r.p=window.__sw__.assetPath+"/bundles/storecredit/"),function(){"use strict";r(244);let{Component:e}=Shopware,{Criteria:t}=Shopware.Data;e.register("sw-customer-grid",{template:'<template>\n  <div>\n    <sw-card title="Select Customer">\n      <sw-text-field \n        v-model:value="searchTerm" \n        placeholder="Search for customers..." \n        @input="onSearch"\n      />\n\n      <sw-data-grid\n              :dataSource="customerOptions"\n              :columns="columns"\n              :isLoading="isLoading"\n              :identifier="\'id\'"\n              :showSelection="true"\n              :selectedItems="selectedItems"\n              @selectItem="onSelectCustomer"\n      >\n\n      <template #column-name="{ item }">\n          {{ item.label }}\n        </template>\n        <template #column-customerNumber="{ item }">\n          {{ item.customerNumber }}\n        </template>\n        <template #column-email="{ item }">\n          {{ item.email }}\n        </template>\n      </sw-data-grid>\n\n       <sw-pagination\n          :total="totalCustomers"\n          :limit="limit"\n          :page="page"\n          @pageChange="onPageChange">\n       </sw-pagination>\n    </sw-card>\n  </div>\n</template>\n',inject:["repositoryFactory"],props:{value:{type:String,required:!1,default:null}},data(){return{selectedNewCustomer:this.value,customerOptions:[],isLoading:!1,searchTerm:"",totalCustomers:0,page:1,limit:10,columns:[{property:"label",label:"Name",allowResize:!0},{property:"customerNumber",label:"Customer Number",allowResize:!0},{property:"email",label:"Email",allowResize:!0}]}},watch:{value(e){this.selectedNewCustomer=e},selectedNewCustomer(e){this.$emit("update:value",e)},searchTerm:{handler(){this.fetchCustomers(!0)},immediate:!1}},created(){this.fetchCustomers()},computed:{selectedItems(){if(!this.selectedNewCustomer)return{};let e=this.customerOptions.find(e=>e.id===this.selectedNewCustomer);return e?{[e.id]:e}:{}}},methods:{async fetchCustomers(e=!1){new t().addSorting(t.sort("lastName","ASC")),e&&(this.page=1),this.isLoading=!0;try{let e=this.createCriteria(),t=await this.repositoryFactory.create("customer").search(e,Shopware.Context.api);this.customerOptions=t.map(e=>({id:e.id,label:`${e.firstName} ${e.lastName}`,customerNumber:e.customerNumber,email:e.email})),this.totalCustomers=t.total}catch(e){console.error("Error fetching customers:",e.response?.data||e)}finally{this.isLoading=!1}},onSearch(){this.fetchCustomers(!0)},onPageChange(e){if(console.log("Raw Page Change Event:",e),"object"==typeof e&&e.page&&(e=e.page),"number"!=typeof e||e<=0){console.error("Invalid page number:",e);return}console.log("Page changed to:",e),this.page=parseInt(e,10),this.fetchCustomers()},onSelectCustomer(e){let t=Object.values(e)[0];t&&(this.selectedNewCustomer=t.id,this.$emit("update:value",t.id))},createCriteria(){let e=Number.isInteger(this.page)&&this.page>0?this.page:1,t=new Shopware.Data.Criteria(e,this.limit);return t.setLimit(this.limit),t.setPage(this.page),this.searchTerm&&this.searchTerm.trim().length>0&&t.addFilter(Shopware.Data.Criteria.multi("OR",[Shopware.Data.Criteria.contains("firstName",this.searchTerm),Shopware.Data.Criteria.contains("lastName",this.searchTerm),Shopware.Data.Criteria.contains("email",this.searchTerm),Shopware.Data.Criteria.contains("customerNumber",this.searchTerm)])),t}}});let{Component:s,Mixin:a}=Shopware,{Criteria:n}=Shopware.Data;s.register("store-credits-index",{template:'<template>\n    <sw-page>\n        <template #smart-bar-header>\n            <sw-page-title>Store Credits</sw-page-title>\n\n            <sw-button\n                    size="small"\n                    variant="primary"\n                    @click="openAddCustomerModal"\n                    class="sw-page__header-add-credit-button"\n            >\n                Add Customer Credit\n            </sw-button>\n        </template>\n\n        <template #content>\n            <sw-data-grid\n                    :dataSource="storeCredits"\n                    :columns="columns"\n                    :isLoading="isLoading"\n                    {# :useContext="false"  #}\n\n            >\n\n                <template #column-balance="{ item }">\n                    {{ formatCurrency(item.balance) }}\n                </template>\n\n\n                <template #column-actions="{ item }">\n                    <sw-button\n                            size="small"\n                            variant="success"\n                            @click="openAddBalanceModal(item)"\n                    >\n                        Add Balance\n                    </sw-button>\n                    <sw-button\n                            size="small"\n                            variant="danger"\n                            @click="openDeductBalanceModal(item)"\n                    >\n                        Deduct Balance\n                    </sw-button>\n                </template>\n\n\n                {# <template #column-history="{ item }">\n                    <sw-context-button>\n                        <sw-context-menu-item\n                                @click="navigateToCustomerHistory(item.storeCreditId, item.customerFullName, item.balance)"\n                        >\n                            View History\n                        </sw-context-menu-item>\n                        <sw-context-menu-item\n                                @click="openDeleteModal(item)"\n                                icon="regular-trash"\n                                variant="danger"\n                        >\n                            Delete\n                        </sw-context-menu-item>\n                    </sw-context-button>\n                </template> #}\n                <template #actions="{ item }">\n                    <sw-context-menu-item\n                        @click="navigateToCustomerHistory(item.storeCreditId, item.customerFullName, item.balance)"\n                    >\n                        View History\n                    </sw-context-menu-item>\n                    <sw-context-menu-item\n                        @click="openDeleteModal(item)"\n                        icon="regular-trash"\n                        variant="danger"\n                    >\n                        Delete\n                    </sw-context-menu-item>\n            </template>\n            </sw-data-grid>\n\n            <sw-modal\n                    v-if="addBalanceModalVisible"\n                    title="Add Balance"\n                    @modal-close="addBalanceModalVisible = false"\n            >\n                <sw-number-field\n                        v-model:value="amount"\n                        label="Amount"\n                        :min="0.00"\n                        :step="0.00"\n                        :number-type="\'float\'"\n                        placeholder="Enter amount"></sw-number-field>\n                <sw-text-field v-model:value="reason" label="Reason" />\n                <sw-button @click="addBalance" size="small" variant="primary">\n                    Submit\n                </sw-button>\n                <sw-button\n                        @click="addBalanceModalVisible = false"\n                        size="small"\n                        variant="danger"\n                >\n                    Cancel\n                </sw-button>\n            </sw-modal>\n\n            <sw-modal\n                    v-if="deductBalanceModalVisible"\n                    title="Deduct Balance"\n                    @modal-close="deductBalanceModalVisible = false"\n            >\n                <sw-number-field\n                        v-model:value="amount"\n                        label="Amount"\n                        :min="0.00"\n                        :step="0.00"\n                        :number-type="\'float\'"\n                        placeholder="Enter amount"></sw-number-field>\n                <sw-text-field v-model:value="reason" label="Reason" />\n                <sw-button @click="deductBalance" size="small" variant="primary">\n                    Submit\n                </sw-button>\n                <sw-button\n                        @click="deductBalanceModalVisible = false"\n                        size="small"\n                        variant="danger"\n                >\n                    Cancel\n                </sw-button>\n            </sw-modal>\n            <sw-modal\n                    v-if="confirmDeleteModalVisible"\n                    title="Confirm Delete"\n                    @modal-close="confirmDeleteModalVisible = false"\n            >\n                <p>Are you sure you want to delete this customer\'s store credit and all the history?</p>\n                <br>\n\n                <sw-button\n                        @click="deleteStoreCredit"\n                        size="small"\n                        variant="danger"\n                >\n                    Confirm\n                </sw-button>\n                <sw-button\n                        @click="confirmDeleteModalVisible = false"\n                        size="small"\n                        variant="primary"\n                >\n                    Cancel\n                </sw-button>\n            </sw-modal>\n            <sw-modal\n                    v-if="addCustomerModalVisible"\n                    title="Add Customer Store Credit"\n                    @modal-close="addCustomerModalVisible = false"\n                    size="large"\n            >\n                 <sw-customer-grid v-model:value="selectedNewCustomer"/>\n                 <sw-card title="Amount">\n                <sw-number-field\n                        v-model:value="newCustomerAmount"\n                        :min="0.00"\n                        :step="0.00"\n                        :number-type="\'float\'"\n                        placeholder="Enter amount"\n                />\n                </sw-card>\n                <template #modal-footer>\n                <sw-button @click="addCustomerCredit" size="small" variant="primary">\n                    Submit\n                </sw-button>\n                <sw-button @click="addCustomerModalVisible = false" size="small" variant="danger">\n                    Cancel\n                </sw-button>\n                </template>\n            </sw-modal>\n        </template>\n    </sw-page>\n</template>',inject:["repositoryFactory","httpClient"],mixins:[a.getByName("notification")],data(){return{confirmDeleteModalVisible:!1,addBalanceModalVisible:!1,deductBalanceModalVisible:!1,addCustomerModalVisible:!1,repository:null,storeCredits:[],customers:[],isLoading:!1,amount:0,reason:"",selectedCustomer:null,selectedNewCustomer:null,selectedStoreCredit:null,newCustomerAmount:0,columns:[{property:"customerFullName",label:"Customer Full Name",allowResize:!0,sortable:!0},{property:"balance",label:"Balance",allowResize:!0},{property:"actions",label:"Balance Actions",allowResize:!1,align:"center",sortable:!1,width:"300px"}]}},created(){this.repository=this.repositoryFactory.create("store_credit"),this.fetchStoreCredits()},methods:{fetchStoreCredits(){this.isLoading=!0;let e=new n;e.addAssociation("customer"),this.repository.search(e,Shopware.Context.api).then(e=>{this.storeCredits=e.map(e=>({id:e.id,customerFullName:`${e.customer.firstName} ${e.customer.lastName}`,balance:e.balance||0,customerId:e.customerId,storeCreditId:e.id}))}).catch(e=>{console.error("Error fetching store credits:",e)}).finally(()=>{this.isLoading=!1})},formatCurrency(e){return new Intl.NumberFormat("en-US",{style:"currency",currency:"USD"}).format(e)},fetchCustomers(){let e=new n;e.addSorting(n.sort("lastName","ASC")),this.repositoryFactory.create("customer").search(e,Shopware.Context.api).then(e=>{this.customers=e.map(e=>({id:e.id,name:`${e.firstName} ${e.lastName}`}))}).catch(e=>{console.error("Error fetching customers:",e)})},openAddBalanceModal(e){this.selectedCustomer=e,this.amount=0,this.reason="",this.addBalanceModalVisible=!0},openDeductBalanceModal(e){this.selectedCustomer=e,this.amount=0,this.reason="",this.deductBalanceModalVisible=!0},openAddCustomerModal(){console.log("Opening Add Customer Modal"),this.selectedNewCustomer=null,this.newCustomerAmount=0,this.addCustomerModalVisible=!0,this.fetchCustomers()},addBalance(){let e=parseFloat(this.amount);if(isNaN(e)||e<=0){this.createNotificationError({title:"Error",message:"Amount must be greater than zero."});return}let t={customerId:this.selectedCustomer.customerId,amount:e,reason:this.reason||"Admin update"};fetch("/api/store-credit/add",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`},body:JSON.stringify(t)}).then(e=>{if(!e.ok)throw Error(`HTTP error! status: ${e.status}`);return e.json()}).then(()=>{this.createNotificationSuccess({title:"Success",message:"Balance added successfully!"}),this.addBalanceModalVisible=!1,this.fetchStoreCredits()}).catch(e=>{console.error("Error adding balance:",e),this.createNotificationError({title:"Error",message:"Failed to add balance."})})},deductBalance(){let e=parseFloat(this.amount);if(isNaN(e)||e<=0){this.createNotificationError({title:"Error",message:"Amount must be greater than zero."});return}let t={customerId:this.selectedCustomer.customerId,amount:e,reason:this.reason||"Admin update"};fetch("/api/store-credit/deduct",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`},body:JSON.stringify(t)}).then(e=>{if(!e.ok)throw Error(`HTTP error! status: ${e.status}`);return e.json()}).then(()=>{this.createNotificationSuccess({title:"Success",message:"Balance deducted successfully!"}),this.deductBalanceModalVisible=!1,this.fetchStoreCredits()}).catch(e=>{console.error("Error deducting balance:",e),this.createNotificationError({title:"Error",message:"Failed to deduct balance."})})},addCustomerCredit(){let e=parseFloat(this.newCustomerAmount);if(!this.selectedNewCustomer){this.createNotificationError({title:"Error",message:"Please select a customer."});return}if(isNaN(e)||e<=0){this.createNotificationError({title:"Error",message:"Amount must be greater than zero."});return}fetch("/api/store-credit/add",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`},body:JSON.stringify({customerId:this.selectedNewCustomer,amount:e,reason:"Admin added store credit"})}).then(e=>e.ok?e.json():e.json().then(e=>{throw Error(e.message||"An error occurred")})).then(e=>{if(e.success)this.createNotificationSuccess({title:"Success",message:"Store credit added successfully!"}),this.addCustomerModalVisible=!1,this.fetchStoreCredits();else throw Error(e.message||"An error occurred")}).catch(e=>{console.error("Error adding store credit:",e),this.createNotificationError({title:"Error",message:e.message||"Failed to add store credit."})})},navigateToCustomerHistory(e,t,r){if(!e){this.createNotificationError({title:"Error",message:"Invalid store credit ID."});return}this.$router.push({name:"store.credits.history",params:{id:e},query:{name:t,balance:r}})},openDeleteModal(e){console.log("Opening delete modal for:",e),this.selectedStoreCredit={...e},this.confirmDeleteModalVisible=!0},deleteStoreCredit(){if(!this.selectedStoreCredit||!this.selectedStoreCredit.id){this.createNotificationError({title:"Error",message:"Invalid store credit selection."});return}this.repository.delete(this.selectedStoreCredit.id,Shopware.Context.api).then(()=>{this.createNotificationSuccess({title:"Success",message:"Store credit deleted successfully!"}),this.confirmDeleteModalVisible=!1,this.fetchStoreCredits()}).catch(e=>{console.error("Error deleting store credit:",e),this.createNotificationError({title:"Error",message:"Failed to delete store credit."})})}}}),r(972);let{Component:i,Mixin:o}=Shopware,{Criteria:l}=Shopware.Data;i.register("store-credits-history",{template:"<template>\n    <sw-page>\n        <template #content>\n            <div class=\"customer-details\">\n                <sw-button\n                        size=\"small\"\n                        variant=\"secondary\"\n                        @click=\"goBack\"\n                >\n                   Go Back\n                </sw-button>\n                <div class=\"customer-info\">\n                    <h2>{{ customerName }}</h2>\n                    <p>Balance: {{ formatCurrency(customerBalance) }}</p>\n                </div>\n            </div>\n\n            <sw-data-grid\n                    :dataSource=\"history\"\n                    :columns=\"[\n                    { property: 'amount', label: 'Amount', align: 'right' },\n                    { property: 'reason', label: 'Reason' },\n                    { property: 'createdAt', label: 'Date', align: 'center' }\n                ]\"\n                    :isLoading=\"isLoading\"\n            >\n                <template #column-amount=\"{ item }\">\n                    <span\n                            :class=\"{\n                            'text-success': item.actionType === 'add',\n                            'text-danger': item.actionType === 'deduct'\n                        }\"\n                    >\n                        {{ item.actionType === 'add' ? '+' : '-' }}\n                        {{ formatCurrency(item.amount) }}\n                    </span>\n                </template>\n\n                <template #column-createdAt=\"{ item }\">\n                    {{ formatDate(item.createdAt) }}\n                </template>\n            </sw-data-grid>\n        </template>\n    </sw-page>\n</template>\n",inject:["repositoryFactory"],mixins:[o.getByName("notification")],data(){return{history:[],isLoading:!1,customerName:this.$route.query.name||"Unknown",customerBalance:this.$route.query.balance||0}},created(){this.fetchHistory()},methods:{goBack(){this.$router.push({name:"store.credits.index"})},fetchHistory(){this.isLoading=!0;let e=new l;e.addFilter(l.equals("storeCreditId",this.$route.params.id)),e.addSorting(l.sort("createdAt","DESC")),this.repositoryFactory.create("store_credit_history").search(e,Shopware.Context.api).then(e=>{this.history=e}).catch(e=>{console.error(e),this.createNotificationError({title:"Error",message:"Failed to fetch history."})}).finally(()=>{this.isLoading=!1})},formatCurrency(e){return new Intl.NumberFormat("en-US",{style:"currency",currency:"USD"}).format(e)},formatDate(e){return new Date(e).toLocaleDateString("en-US",{year:"numeric",month:"short",day:"2-digit",hour:"2-digit",minute:"2-digit"})}}}),Shopware.Module.register("store-credits",{type:"plugin",name:"store-credits",title:"Store Credits",description:"Manage customer store credits.",color:"#ffcc00",icon:"default-money-coin",routes:{index:{component:"store-credits-index",path:"index"},history:{component:"store-credits-history",path:"history/:id"}},navigation:[{label:"Store Credits",color:"#ffcc00",path:"store.credits.index",icon:"default-money-coin",position:100,parent:"sw-customer"}]}),Shopware.Component.override("sw-order-line-items-grid-sales-channel",{template:'{% block sw_order_line_items_grid_sales_channel_grid %}\n    {% block sw_alert_message %}\n<br>\n            <sw-alert variant="warning">\n                To apply store credits from the customer balance, add a credit item then use the specific discount name: <strong>Store credit discount</strong>\n            </sw-alert>\n    {% endblock %}\n\n    {% parent %}\n{% endblock %}\n'}),r(743);var d=Shopware;d.Component.override("sw-order-detail-details",{mounted(){this.applyFieldRestrictions()},watch:{"order.customFields.orderTypePayment"(){this.applyFieldRestrictions()}},methods:{applyFieldRestrictions(){this.$nextTick(()=>{let e=this.order?.customFields?.orderTypePayment;console.log("Selected Order Payment Type:",e),this.$el.classList.remove("cc-payment","ach-echeck-payment"),"credit_card"===e?(console.log("CC Payment detected, disabling specific fields."),this.$el.classList.add("cc-payment"),this.disableFields(["sw-order-detail-details__billing-address","sw-order-detail-details__shipping-address"])):"ach_echeck"===e&&(console.log("ACH eCheck detected, disabling specific fields."),this.$el.classList.add("ach-echeck-payment"),this.disableFields(["sw-order-detail-details__billing-address","sw-order-detail-details__shipping-address","sw-order-detail-details__phone-number"]))})},disableFields(e){e.forEach(e=>{let t=this.$el.querySelector(`.${e}`);t&&t.querySelectorAll("input, textarea, select, button").forEach(e=>e.setAttribute("disabled","disabled"))})}}}),r(615),d.Component.override("sw-order-address-selection",{computed:{addressOptions(){let e=(this.customer?.addresses||[]).map(e=>({label:`${e.street}, ${e.zipcode} ${e.city}, ${e.country?.translated?.name??""}`,...e}));return this.address&&e.unshift({label:this.address?.zipcode?`${this.address.street}, ${this.address.zipcode} ${this.address.city}, ${this.address?.country?.translated?.name??""}`:`${this.address.street}, ${this.address.city}, ${this.address?.country?.translated?.name??""}`,...this.address}),e}}})}()}();